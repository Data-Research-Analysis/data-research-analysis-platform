# =============================================================================
# Data Research Analysis Platform - Docker Environment Configuration
# =============================================================================
# This file contains Docker Compose environment variables for running the
# Data Research Analysis Platform in a containerized environment.
#
# SETUP INSTRUCTIONS:
# 1. Copy this file to .env: cp .env.example .env
# 2. Fill in the required values marked with [REQUIRED]
# 3. Customize optional values as needed for your environment
# 4. Run: docker-compose up -d
#
# SECURITY NOTE: Never commit the actual .env file to version control!
# =============================================================================

# -----------------------------------------------------------------------------
# PostgreSQL Database Configuration
# -----------------------------------------------------------------------------
# Primary database for the application data storage

# [REQUIRED] PostgreSQL username for the database
POSTGRESDB_USER=dra_user

# [REQUIRED] PostgreSQL password for the database user
POSTGRESDB_ROOT_PASSWORD=your_secure_postgres_password_here

# [REQUIRED] PostgreSQL database name
POSTGRESDB_DATABASE=dra_database

# Local port to access PostgreSQL (host machine)
POSTGRESDB_LOCAL_PORT=5434

# Internal Docker port for PostgreSQL service
POSTGRESDB_DOCKER_PORT=5432

# -----------------------------------------------------------------------------
# Frontend Service Configuration (Nuxt.js)
# -----------------------------------------------------------------------------
# Configuration for the frontend web application container

# Local port to access frontend (host machine)
FRONTEND_LOCAL_PORT=3000

# Internal Docker port for frontend service
FRONTEND_DOCKER_PORT=3000

# -----------------------------------------------------------------------------
# Backend Service Configuration (Node.js/Express)
# -----------------------------------------------------------------------------
# Configuration for the backend API server container

# Local port to access backend API (host machine)
BACKEND_LOCAL_PORT=3002

# Internal Docker port for backend service
BACKEND_DOCKER_PORT=3002

# -----------------------------------------------------------------------------
# Redis Configuration
# -----------------------------------------------------------------------------
# Redis is used for caching, sessions, and queue management

# Local port to access Redis (host machine)
REDIS_LOCAL_PORT=6379

# Internal Docker port for Redis service
REDIS_DOCKER_PORT=6379

# [OPTIONAL] Redis password for authentication (leave empty for no auth)
REDIS_PASSWORD=

# -----------------------------------------------------------------------------
# MySQL Configuration (Optional - for external data sources)
# -----------------------------------------------------------------------------
# MySQL database for connecting external data sources during development

# MySQL username for external data source testing
MYSQLDB_USER=mysql_user

# MySQL password for external data source testing  
MYSQLDB_ROOT_PASSWORD=your_mysql_password_here

# MySQL database name for testing
MYSQLDB_DATABASE=test_database

# Local port to access MySQL (host machine)
MYSQLDB_LOCAL_PORT=3306

# Internal Docker port for MySQL service
MYSQLDB_DOCKER_PORT=3306

# -----------------------------------------------------------------------------
# MariaDB Configuration (Optional - for external data sources)
# -----------------------------------------------------------------------------
# MariaDB database for connecting external data sources during development

# MariaDB username for external data source testing
MARIADB_USER=mariadb_user

# MariaDB password for external data source testing
MARIADB_ROOT_PASSWORD=your_mariadb_password_here

# MariaDB database name for testing
MARIADB_DATABASE=test_database

# Local port to access MariaDB (host machine)
MARIADB_LOCAL_PORT=3307

# Internal Docker port for MariaDB service
MARIADB_DOCKER_PORT=3306